# Generated by Django 5.1 on 2024-08-22 23:29

import django.db.models.deletion
import django_multitenant.fields
import django_multitenant.mixins
import django_multitenant.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('customer_accounts', '0001_initial'),
        ('tickets', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('scale', models.CharField(choices=[('binary', 'Binary'), ('3_point', '3 Point'), ('5_point', '5 Point'), ('7_point', '7 Point')], max_length=50)),
                ('allow_na', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
            bases=(django_multitenant.mixins.TenantModelMixin, models.Model),
            managers=[
                ('objects', django_multitenant.models.TenantManager()),
            ],
        ),
        migrations.CreateModel(
            name='AssignmentDashboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('manager', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='managed_dashboards', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AssignmentRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('criteria', models.JSONField()),
                ('account', django_multitenant.fields.TenantForeignKey(on_delete=django.db.models.deletion.CASCADE, to='customer_accounts.customeraccount')),
                ('reviewers', models.ManyToManyField(related_name='assignment_rules', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
            bases=(django_multitenant.mixins.TenantModelMixin, models.Model),
            managers=[
                ('objects', django_multitenant.models.TenantManager()),
            ],
        ),
        migrations.CreateModel(
            name='Scorecard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('account', django_multitenant.fields.TenantForeignKey(on_delete=django.db.models.deletion.CASCADE, to='customer_accounts.customeraccount')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scorecards', to=settings.AUTH_USER_MODEL)),
                ('workspace', django_multitenant.fields.TenantForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='workspace', to='customer_accounts.workspace')),
            ],
            options={
                'abstract': False,
            },
            bases=(django_multitenant.mixins.TenantModelMixin, models.Model),
            managers=[
                ('objects', django_multitenant.models.TenantManager()),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('draft', models.BooleanField(default=True)),
                ('comments', models.TextField()),
                ('account', django_multitenant.fields.TenantForeignKey(on_delete=django.db.models.deletion.CASCADE, to='customer_accounts.customeraccount')),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews_received', to=settings.AUTH_USER_MODEL)),
                ('reviewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL)),
                ('scorecard', django_multitenant.fields.TenantForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='reviews.scorecard')),
            ],
            options={
                'abstract': False,
            },
            bases=(django_multitenant.mixins.TenantModelMixin, models.Model),
            managers=[
                ('objects', django_multitenant.models.TenantManager()),
            ],
        ),
        migrations.CreateModel(
            name='ScorecardCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weighting', models.FloatField(default=1.0)),
                ('account', django_multitenant.fields.TenantForeignKey(on_delete=django.db.models.deletion.CASCADE, to='customer_accounts.customeraccount')),
                ('category', django_multitenant.fields.TenantForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scorecard_categories', to='reviews.category')),
                ('scorecard', django_multitenant.fields.TenantForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scorecard_categories', to='reviews.scorecard')),
            ],
            options={
                'unique_together': {('scorecard', 'category')},
            },
            bases=(django_multitenant.mixins.TenantModelMixin, models.Model),
            managers=[
                ('objects', django_multitenant.models.TenantManager()),
            ],
        ),
        migrations.CreateModel(
            name='TicketAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('completion_percentage', models.FloatField(default=0.0)),
                ('status', models.CharField(choices=[('not_started', 'Not Started'), ('in_progress', 'In Progress'), ('completed', 'Completed')], default='not_started', max_length=20)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('account', django_multitenant.fields.TenantForeignKey(on_delete=django.db.models.deletion.CASCADE, to='customer_accounts.customeraccount')),
                ('assignment_rule', django_multitenant.fields.TenantForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ticket_assignments', to='reviews.assignmentrule')),
                ('reviewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ticket_assignments', to=settings.AUTH_USER_MODEL)),
                ('reviews', models.ManyToManyField(related_name='ticket_assignments', to='reviews.review')),
            ],
            options={
                'abstract': False,
            },
            bases=(django_multitenant.mixins.TenantModelMixin, models.Model),
            managers=[
                ('objects', django_multitenant.models.TenantManager()),
            ],
        ),
        migrations.CreateModel(
            name='ConversationReview',
            fields=[
                ('review_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='reviews.review')),
                ('conversation', django_multitenant.fields.TenantForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conversation_reviews', to='tickets.conversation')),
            ],
            options={
                'abstract': False,
            },
            bases=('reviews.review',),
            managers=[
                ('objects', django_multitenant.models.TenantManager()),
            ],
        ),
        migrations.CreateModel(
            name='TicketReview',
            fields=[
                ('review_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='reviews.review')),
                ('ticket', django_multitenant.fields.TenantForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ticket_reviews', to='tickets.ticket')),
            ],
            options={
                'abstract': False,
            },
            bases=('reviews.review',),
            managers=[
                ('objects', django_multitenant.models.TenantManager()),
            ],
        ),
        migrations.CreateModel(
            name='ReviewCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(blank=True, null=True)),
                ('na', models.BooleanField(default=False)),
                ('account', django_multitenant.fields.TenantForeignKey(on_delete=django.db.models.deletion.CASCADE, to='customer_accounts.customeraccount')),
                ('review', django_multitenant.fields.TenantForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review_categories', to='reviews.review')),
                ('scorecard_category', django_multitenant.fields.TenantForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review_categories', to='reviews.scorecardcategory')),
            ],
            options={
                'unique_together': {('review', 'scorecard_category')},
            },
            bases=(django_multitenant.mixins.TenantModelMixin, models.Model),
            managers=[
                ('objects', django_multitenant.models.TenantManager()),
            ],
        ),
    ]
