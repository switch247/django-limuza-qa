# Generated by Django 5.1 on 2024-08-22 23:29

import django.db.models.deletion
import django_multitenant.fields
import django_multitenant.mixins
import django_multitenant.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('customer_accounts', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Conversation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.CharField(max_length=255)),
                ('external_agent_id', models.CharField(max_length=255, null=True)),
                ('incoming', models.BooleanField()),
                ('private', models.BooleanField()),
                ('source', models.IntegerField()),
                ('body', models.TextField()),
                ('body_text', models.TextField()),
                ('from_email', models.EmailField(max_length=254, null=True)),
                ('additional_data', models.JSONField(blank=True, null=True)),
                ('account', django_multitenant.fields.TenantForeignKey(on_delete=django.db.models.deletion.CASCADE, to='customer_accounts.customeraccount')),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='conversations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
            bases=(django_multitenant.mixins.TenantModelMixin, models.Model),
            managers=[
                ('objects', django_multitenant.models.TenantManager()),
            ],
        ),
        migrations.CreateModel(
            name='Integration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('type', models.CharField(max_length=255)),
                ('integration_key', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('active', models.BooleanField(default=True)),
                ('details', models.JSONField(default=dict)),
                ('account', django_multitenant.fields.TenantForeignKey(on_delete=django.db.models.deletion.CASCADE, to='customer_accounts.customeraccount')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('workspace', django_multitenant.fields.TenantForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='integrations', to='customer_accounts.workspace')),
            ],
            options={
                'abstract': False,
            },
            bases=(django_multitenant.mixins.TenantModelMixin, models.Model),
            managers=[
                ('objects', django_multitenant.models.TenantManager()),
            ],
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('external_id', models.CharField(max_length=255)),
                ('subject', models.CharField(max_length=255)),
                ('external_agent_id', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField()),
                ('status', models.CharField(max_length=50)),
                ('is_call', models.BooleanField(default=False)),
                ('ticket_data', models.JSONField()),
                ('html_ticket', models.TextField()),
                ('text_ticket', models.TextField()),
                ('account', django_multitenant.fields.TenantForeignKey(on_delete=django.db.models.deletion.CASCADE, to='customer_accounts.customeraccount')),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='tickets', to=settings.AUTH_USER_MODEL)),
                ('integration', django_multitenant.fields.TenantForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tickets.integration')),
            ],
            options={
                'abstract': False,
            },
            bases=(django_multitenant.mixins.TenantModelMixin, models.Model),
            managers=[
                ('objects', django_multitenant.models.TenantManager()),
            ],
        ),
        migrations.CreateModel(
            name='ConversationCall',
            fields=[
                ('conversation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tickets.conversation')),
                ('call_recording', models.FileField(blank=True, null=True, upload_to='call_recordings/')),
                ('call_transcription', models.TextField(blank=True, null=True)),
                ('call_transcription_data', models.JSONField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('tickets.conversation',),
            managers=[
                ('objects', django_multitenant.models.TenantManager()),
            ],
        ),
        migrations.CreateModel(
            name='ConversationChat',
            fields=[
                ('conversation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tickets.conversation')),
                ('chat_platform', models.CharField(max_length=50)),
            ],
            options={
                'abstract': False,
            },
            bases=('tickets.conversation',),
            managers=[
                ('objects', django_multitenant.models.TenantManager()),
            ],
        ),
        migrations.CreateModel(
            name='ConversationEmail',
            fields=[
                ('conversation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tickets.conversation')),
                ('title', models.TextField()),
            ],
            options={
                'abstract': False,
            },
            bases=('tickets.conversation',),
            managers=[
                ('objects', django_multitenant.models.TenantManager()),
            ],
        ),
        migrations.CreateModel(
            name='FreshdeskCallConversation',
            fields=[
                ('conversation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tickets.conversation')),
                ('call_recording', models.FileField(blank=True, null=True, upload_to='call_recordings/')),
                ('call_transcription', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('tickets.conversation',),
            managers=[
                ('objects', django_multitenant.models.TenantManager()),
            ],
        ),
        migrations.CreateModel(
            name='FreshdeskChatConversation',
            fields=[
                ('conversation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tickets.conversation')),
                ('chat_platform', models.CharField(max_length=50)),
            ],
            options={
                'abstract': False,
            },
            bases=('tickets.conversation',),
            managers=[
                ('objects', django_multitenant.models.TenantManager()),
            ],
        ),
        migrations.CreateModel(
            name='FreshdeskEmailConversation',
            fields=[
                ('conversation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tickets.conversation')),
                ('title', models.TextField()),
            ],
            options={
                'abstract': False,
            },
            bases=('tickets.conversation',),
            managers=[
                ('objects', django_multitenant.models.TenantManager()),
            ],
        ),
        migrations.CreateModel(
            name='FreshdeskIntegration',
            fields=[
                ('integration_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tickets.integration')),
            ],
            options={
                'abstract': False,
            },
            bases=('tickets.integration',),
            managers=[
                ('objects', django_multitenant.models.TenantManager()),
            ],
        ),
        migrations.CreateModel(
            name='FreshdeskTicket',
            fields=[
                ('ticket_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tickets.ticket')),
                ('description', models.TextField()),
                ('description_text', models.TextField()),
            ],
            options={
                'abstract': False,
            },
            bases=('tickets.ticket',),
            managers=[
                ('objects', django_multitenant.models.TenantManager()),
            ],
        ),
        migrations.AddField(
            model_name='conversation',
            name='ticket',
            field=django_multitenant.fields.TenantForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='conversations', to='tickets.ticket'),
        ),
        migrations.CreateModel(
            name='SavedFilter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filter_data', models.JSONField()),
                ('name', models.CharField(max_length=255)),
                ('account', django_multitenant.fields.TenantForeignKey(on_delete=django.db.models.deletion.CASCADE, to='customer_accounts.customeraccount')),
                ('integration', django_multitenant.fields.TenantForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tickets.integration')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
            bases=(django_multitenant.mixins.TenantModelMixin, models.Model),
            managers=[
                ('objects', django_multitenant.models.TenantManager()),
            ],
        ),
    ]
